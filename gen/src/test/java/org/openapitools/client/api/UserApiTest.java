/*
 * Gest-ES Api
 * This api provides communication with a database for a TB project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: claude-andre.inacioalves@heig-vd.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiMessageDTO;
import org.openapitools.client.model.UserDTO;
import org.openapitools.client.model.UserModificationDTO;
import org.openapitools.client.model.UserSimpleDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Delete a specific user.
     *
     * This private endpoint is used to remove one user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String username = null;
        ApiMessageDTO response = api.deleteUser(username);

        // TODO: test validations
    }
    
    /**
     * Delete all users.
     *
     * This private endpoint is used to remove all users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsersTest() throws ApiException {
        ApiMessageDTO response = api.deleteUsers();

        // TODO: test validations
    }
    
    /**
     * Get a specific user.
     *
     * This private endpoint is used to get one user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String username = null;
        UserDTO response = api.getUser(username);

        // TODO: test validations
    }
    
    /**
     * Get all users.
     *
     * This private endpoint is used to get all users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        List<UserSimpleDTO> response = api.getUsers();

        // TODO: test validations
    }
    
    /**
     * Update a specific user.
     *
     * This private endpoint is used to modify one user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String username = null;
        UserModificationDTO userModificationDTO = null;
        UserDTO response = api.updateUser(username, userModificationDTO);

        // TODO: test validations
    }
    
}
