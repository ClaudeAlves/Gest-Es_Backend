/*
 * Gest-ES Api
 * This api provides communication with a database for a TB project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: claude-andre.inacioalves@heig-vd.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CalendarDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarApi {
    private ApiClient localVarApiClient;

    public CalendarApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getCalendar
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get user calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalendarCall(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/{username}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWTSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalendarValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getCalendar(Async)");
        }
        

        okhttp3.Call localVarCall = getCalendarCall(username, _callback);
        return localVarCall;

    }

    /**
     * Get a specific user calendar.
     * This endpoint is used to get the calendar of a user
     * @param username  (required)
     * @return CalendarDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get user calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public CalendarDTO getCalendar(String username) throws ApiException {
        ApiResponse<CalendarDTO> localVarResp = getCalendarWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * Get a specific user calendar.
     * This endpoint is used to get the calendar of a user
     * @param username  (required)
     * @return ApiResponse&lt;CalendarDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get user calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarDTO> getCalendarWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getCalendarValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<CalendarDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific user calendar. (asynchronously)
     * This endpoint is used to get the calendar of a user
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get user calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalendarAsync(String username, final ApiCallback<CalendarDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalendarValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<CalendarDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCalendarUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get users calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalendarUserCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWTSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCalendarUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCalendarUserCall(_callback);
        return localVarCall;

    }

    /**
     * Get a specific user calendar.
     * This endpoint is used to get the calendar of the authenticated user
     * @return CalendarDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get users calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public CalendarDTO getCalendarUser() throws ApiException {
        ApiResponse<CalendarDTO> localVarResp = getCalendarUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a specific user calendar.
     * This endpoint is used to get the calendar of the authenticated user
     * @return ApiResponse&lt;CalendarDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get users calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarDTO> getCalendarUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCalendarUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CalendarDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific user calendar. (asynchronously)
     * This endpoint is used to get the calendar of the authenticated user
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get users calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCalendarUserAsync(final ApiCallback<CalendarDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCalendarUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CalendarDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClassCalendar
     * @param className  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get class calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassCalendarCall(String className, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/class/{className}"
            .replaceAll("\\{" + "className" + "\\}", localVarApiClient.escapeString(className.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWTSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassCalendarValidateBeforeCall(String className, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'className' is set
        if (className == null) {
            throw new ApiException("Missing the required parameter 'className' when calling getClassCalendar(Async)");
        }
        

        okhttp3.Call localVarCall = getClassCalendarCall(className, _callback);
        return localVarCall;

    }

    /**
     * Get a class calendar.
     * This endpoint is used to get the calendar of a class
     * @param className  (required)
     * @return CalendarDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get class calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public CalendarDTO getClassCalendar(String className) throws ApiException {
        ApiResponse<CalendarDTO> localVarResp = getClassCalendarWithHttpInfo(className);
        return localVarResp.getData();
    }

    /**
     * Get a class calendar.
     * This endpoint is used to get the calendar of a class
     * @param className  (required)
     * @return ApiResponse&lt;CalendarDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get class calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarDTO> getClassCalendarWithHttpInfo(String className) throws ApiException {
        okhttp3.Call localVarCall = getClassCalendarValidateBeforeCall(className, null);
        Type localVarReturnType = new TypeToken<CalendarDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a class calendar. (asynchronously)
     * This endpoint is used to get the calendar of a class
     * @param className  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get class calendar successfull. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassCalendarAsync(String className, final ApiCallback<CalendarDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassCalendarValidateBeforeCall(className, _callback);
        Type localVarReturnType = new TypeToken<CalendarDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
