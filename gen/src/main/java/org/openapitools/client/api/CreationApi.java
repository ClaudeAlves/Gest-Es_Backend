/*
 * Gest-ES Api
 * This api provides communication with a database for a TB project
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: claude-andre.inacioalves@heig-vd.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiMessageDTO;
import org.openapitools.client.model.CourseDTO;
import org.openapitools.client.model.ModuleDTO;
import org.openapitools.client.model.SubjectDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreationApi {
    private ApiClient localVarApiClient;

    public CreationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCourse
     * @param courseDTO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCourseCall(CourseDTO courseDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = courseDTO;

        // create path and map variables
        String localVarPath = "/creation/course";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWTSecurity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCourseValidateBeforeCall(CourseDTO courseDTO, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createCourseCall(courseDTO, _callback);
        return localVarCall;

    }

    /**
     * create course.
     * This endpoint is used to create a course.
     * @param courseDTO  (optional)
     * @return ApiMessageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiMessageDTO createCourse(CourseDTO courseDTO) throws ApiException {
        ApiResponse<ApiMessageDTO> localVarResp = createCourseWithHttpInfo(courseDTO);
        return localVarResp.getData();
    }

    /**
     * create course.
     * This endpoint is used to create a course.
     * @param courseDTO  (optional)
     * @return ApiResponse&lt;ApiMessageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiMessageDTO> createCourseWithHttpInfo(CourseDTO courseDTO) throws ApiException {
        okhttp3.Call localVarCall = createCourseValidateBeforeCall(courseDTO, null);
        Type localVarReturnType = new TypeToken<ApiMessageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create course. (asynchronously)
     * This endpoint is used to create a course.
     * @param courseDTO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCourseAsync(CourseDTO courseDTO, final ApiCallback<ApiMessageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCourseValidateBeforeCall(courseDTO, _callback);
        Type localVarReturnType = new TypeToken<ApiMessageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createModule
     * @param moduleDTO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createModuleCall(ModuleDTO moduleDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = moduleDTO;

        // create path and map variables
        String localVarPath = "/creation/module";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWTSecurity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createModuleValidateBeforeCall(ModuleDTO moduleDTO, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createModuleCall(moduleDTO, _callback);
        return localVarCall;

    }

    /**
     * create module.
     * This endpoint is used to create a module.
     * @param moduleDTO  (optional)
     * @return ApiMessageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiMessageDTO createModule(ModuleDTO moduleDTO) throws ApiException {
        ApiResponse<ApiMessageDTO> localVarResp = createModuleWithHttpInfo(moduleDTO);
        return localVarResp.getData();
    }

    /**
     * create module.
     * This endpoint is used to create a module.
     * @param moduleDTO  (optional)
     * @return ApiResponse&lt;ApiMessageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiMessageDTO> createModuleWithHttpInfo(ModuleDTO moduleDTO) throws ApiException {
        okhttp3.Call localVarCall = createModuleValidateBeforeCall(moduleDTO, null);
        Type localVarReturnType = new TypeToken<ApiMessageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create module. (asynchronously)
     * This endpoint is used to create a module.
     * @param moduleDTO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createModuleAsync(ModuleDTO moduleDTO, final ApiCallback<ApiMessageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createModuleValidateBeforeCall(moduleDTO, _callback);
        Type localVarReturnType = new TypeToken<ApiMessageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSubject
     * @param subjectDTO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubjectCall(SubjectDTO subjectDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = subjectDTO;

        // create path and map variables
        String localVarPath = "/creation/subject";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWTSecurity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSubjectValidateBeforeCall(SubjectDTO subjectDTO, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createSubjectCall(subjectDTO, _callback);
        return localVarCall;

    }

    /**
     * create subject.
     * This endpoint is used to create a subject.
     * @param subjectDTO  (optional)
     * @return ApiMessageDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiMessageDTO createSubject(SubjectDTO subjectDTO) throws ApiException {
        ApiResponse<ApiMessageDTO> localVarResp = createSubjectWithHttpInfo(subjectDTO);
        return localVarResp.getData();
    }

    /**
     * create subject.
     * This endpoint is used to create a subject.
     * @param subjectDTO  (optional)
     * @return ApiResponse&lt;ApiMessageDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiMessageDTO> createSubjectWithHttpInfo(SubjectDTO subjectDTO) throws ApiException {
        okhttp3.Call localVarCall = createSubjectValidateBeforeCall(subjectDTO, null);
        Type localVarReturnType = new TypeToken<ApiMessageDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * create subject. (asynchronously)
     * This endpoint is used to create a subject.
     * @param subjectDTO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Creation successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSubjectAsync(SubjectDTO subjectDTO, final ApiCallback<ApiMessageDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSubjectValidateBeforeCall(subjectDTO, _callback);
        Type localVarReturnType = new TypeToken<ApiMessageDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
